df.describe() # выводит статичтическую информацию по таблице (средние, медиа, квантилити и др)
df.describe(include = ['object']) # выводит информацию по столбцам (top- значение моды, freq - количество сколько раз мода встречается в столбце, unique - уникальные значения) 
df['TypeName'].value_counts() # посчитать какие значения и сколько их встречается в столбце "TypeName"
company[company == company.max()] # выведет информацию из колонки company об максимальном количестве вхождений
df.sample() # случайная строка из df

from sklearn.model_selection import train_test_split 
train, test = train_test_split(df_bmw, train_size = 0.75)  # рандомно разбивает датафрейм на две выборки в соотношении как указано в train_size

train, test = train_test_split(df_bmw, random_state = 1, train_size = 0.75) # рандомно разбивает датафрейм на две выборки в соотношении как указано в train_size,
#но при повторном срабатывании сборка будет одинаковая постоянно

train['price'].hist() # строим гистограмму и видим "жирный хвост" который характеризует что есть немного но очень дорогх машин

train_sv = train.groupby('year')['price'].agg(['count','mean', 'median']) # создает сводную таблицу с параметрами 'count','mean', 'median'
####
train['price_pred_mean'] = train['price'].mean() # Находим среднее
train['err'] = train['price_pred_mean'] - train['price'] # Находим отклонение от среднего. Видно что предсказывать цену просто отталкиваясь от среднего - дурная затея
####

from sklearn.metrics import mean_absolute_percentage_error, mean_absolute_error
mean_absolute_error(train['price'],train['price_pred_median']) # считаем ошибку на треине по медиане (определяем +\- от среднего значения)

