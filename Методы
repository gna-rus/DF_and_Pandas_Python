tuple1 = df['Price_euros'].min(), df['Price_euros'].max() # создает кортеж из двух элементов
model_year_mean = train.groupby('year')['price'].mean().reset_index()  # .reset_index() - нужна для индексации в сводной таблице
model_year_mean.columns # выводит список названий всех колонок
model_year_mean.columns = ['year', 'price_pred_year_mean'] # переименовывание нужно для того чтобы эту таблицу присоединенить в train
train = train.merge(model_year_mean, how='left', on='year') # к таблице train присоединение таблицу model_year_mean по ключу year
df.shape # выводит кортеж с размерностью таблицы
df.loc[3] # пытается взять строку из df по индексу, но если индекса такого нет в таблице то выдаст ошибку
df.loc[[1,12,44,100]] # пытается взять несколько строк по индексу
df.iloc[3] # пытается взять строку по порядковому номеру из таблицы
df.iloc[[1,12,44,100]] # пытается взять несколько строк по порядковому номеру
df.sort_values('age') # сортирует всю таблицу по столбцу age от малого к большому
df.sort_values('age', ascending=False) # сортирует всю таблицу по столбцу age от большого к малому
df.sort_values(['age', 'value']) # сортировка по двум признакам (сначала по age а потом в рамках одного значения age сортирует по value)) 

####
avg = df.groupby('bedrooms').agg({'price':'mean'})
# создаю сводную таблицу по основному признаку bedrooms и по этому призную для каждого уникального значения bedrooms выводится среднее значение что хранятся в price (таких связко ключ-значение может быть много)
price = df.groupby('condition').agg({'price':['min', 'mean' , 'max']}) # можно так
view_waterfront = df.pivot_table(index = 'waterfront', aggfunc = 'count')['view'] # можно и так (aggfunc это аналог agg)
view_waterfront = df.pivot_table(index='waterfront', aggfunc='count', values='view') # или так
####

####
df.loc[df['col'] > condition, 'col'] = new_val
# Этот код заменяет значения в колонке 'col', соответствующие условию 'condition', на новое значение 'new_val', обновляя DataFrame непосредственно в процессе работы.
####
# В pandas нету in но есть isin
filtered_df = df[df['Product_ID'].isin(['001', '003', '005'])]
# В колонке Product_ID ищется значение '001', '003', '005' и фильтруется по ним таблица
# & - логическое И
# | - логическое ИЛИ
# ~ - логическое НЕ
